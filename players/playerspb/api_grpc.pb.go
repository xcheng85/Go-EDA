// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: playerspb/api.proto

package playerspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlayersService_GetPlayer_FullMethodName = "/playerspb.PlayersService/GetPlayer"
)

// PlayersServiceClient is the client API for PlayersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayersServiceClient interface {
	GetPlayer(ctx context.Context, in *GetPlayerRequest, opts ...grpc.CallOption) (*GetPlayerResponse, error)
}

type playersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayersServiceClient(cc grpc.ClientConnInterface) PlayersServiceClient {
	return &playersServiceClient{cc}
}

func (c *playersServiceClient) GetPlayer(ctx context.Context, in *GetPlayerRequest, opts ...grpc.CallOption) (*GetPlayerResponse, error) {
	out := new(GetPlayerResponse)
	err := c.cc.Invoke(ctx, PlayersService_GetPlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayersServiceServer is the server API for PlayersService service.
// All implementations must embed UnimplementedPlayersServiceServer
// for forward compatibility
type PlayersServiceServer interface {
	GetPlayer(context.Context, *GetPlayerRequest) (*GetPlayerResponse, error)
	mustEmbedUnimplementedPlayersServiceServer()
}

// UnimplementedPlayersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlayersServiceServer struct {
}

func (UnimplementedPlayersServiceServer) GetPlayer(context.Context, *GetPlayerRequest) (*GetPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayer not implemented")
}
func (UnimplementedPlayersServiceServer) mustEmbedUnimplementedPlayersServiceServer() {}

// UnsafePlayersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayersServiceServer will
// result in compilation errors.
type UnsafePlayersServiceServer interface {
	mustEmbedUnimplementedPlayersServiceServer()
}

func RegisterPlayersServiceServer(s grpc.ServiceRegistrar, srv PlayersServiceServer) {
	s.RegisterService(&PlayersService_ServiceDesc, srv)
}

func _PlayersService_GetPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayersServiceServer).GetPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayersService_GetPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayersServiceServer).GetPlayer(ctx, req.(*GetPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayersService_ServiceDesc is the grpc.ServiceDesc for PlayersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playerspb.PlayersService",
	HandlerType: (*PlayersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayer",
			Handler:    _PlayersService_GetPlayer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playerspb/api.proto",
}
